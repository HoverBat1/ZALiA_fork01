<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -1000;

FRAME_COUNTER_MAX = 48;
frameCounter = -1;

useC1 = true;
useC2 = false;
useC3 = false;

COL1 = c_red;
COL2 = c_lime;
COL3 = c_blue;

C_RAD1 = 2;
C_RAD2 = 4;
C_RAD3 = 8;

c_rads[2] = C_RAD3;
c_rads[1] = C_RAD2;
c_rads[0] = C_RAD1;

// modulus values to calculate delay
// will be calculated with the g.timer1
// which restarts every 48 frames
MOD2    = 2;    // blink every 2nd frame
MOD4    = 4;    // blink every 4th frame
MOD6    = 6;    // blink every 6th frame
MOD8    = 8;    // blink every 8th frame
MOD12   = 12;   // blink every 12th frame
MOD16   = 16;   // blink every 16th frame

PADY = 4;
PADX = 8;
SPACING = C_RAD3 * 2 + PADX;
YOFF = g.VIEW_H - C_RAD3 - PADY;
XOFF_C1 = (g.VIEW_W &gt;&gt;1) - SPACING;
XOFF_C2 =  g.VIEW_W &gt;&gt;1;
XOFF_C3 = (g.VIEW_W &gt;&gt;1) + SPACING;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (g.can_use_FrameIndicator)
{
    var _x = view_xview[0];
    
    if (useC1 &amp;&amp; !(g.counter0 &amp; 1)) // blink every 2nd frame
    { draw_circle_colour( _x + XOFF_C1, YOFF, C_RAD3, COL1, COL1, false); }
    
    if (useC2 &amp;&amp; !(g.counter0 &amp; 3)) // blink every 4th frame
    { draw_circle_colour( _x + XOFF_C2, YOFF, C_RAD3, COL2, COL2, false); }
    
    if (useC3 &amp;&amp; !(g.counter0 &amp; 7)) // blink every 8th frame
    { draw_circle_colour( _x + XOFF_C3, YOFF, C_RAD3, COL3, COL3, false); }
}



/*
frameCounter++;
if (frameCounter == FRAME_COUNTER_MAX) frameCounter = 0;

if (g.can_use_FrameIndicator)
{
    if (useC1 &amp;&amp; frameCounter mod MOD2 == 0)
        draw_circle_colour( view_xview[0] + XOFF_C1, YOFF, 
                            C_RAD3, COL1, COL1, false);
    
    if (useC2 &amp;&amp; frameCounter mod MOD4 == 0)
        draw_circle_colour( view_xview[0] + XOFF_C2, YOFF, 
                            C_RAD3, COL2, COL2, false);
    
    if (useC3 &amp;&amp; frameCounter mod MOD8 == 0)
        draw_circle_colour( view_xview[0] + XOFF_C3, YOFF, 
                            C_RAD3, COL3, COL3, false);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
